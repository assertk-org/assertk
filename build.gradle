import org.apache.tools.ant.taskdefs.condition.Os

plugins {
    id 'maven-publish'
    id 'signing'
    id 'org.jetbrains.kotlin.multiplatform' version '1.3.40'
    id 'org.jetbrains.dokka' version '0.9.17'
    id 'io.gitlab.arturbosch.detekt' version '1.0.0-RC16'
    id 'org.ajoberstar.git-publish' version '2.1.1'
    id 'com.moowork.node' version '1.2.0'
}

allprojects {
    group 'com.willowtreeapps.assertk'
    version '0.20-SNAPSHOT'
}

ext {
    isReleaseVersion = !(project.version =~ /-SNAPSHOT$/)
}

configurations.all {
    // Don't cache SNAPSHOT deps
    resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
}

repositories {
    mavenCentral()
    jcenter()
    if (!isReleaseVersion) {
        maven { url 'https://oss.sonatype.org/content/repositories/snapshots'}
    }
}

task compileTemplates(type: TemplateTask) {
    inputDir = file('src/template')
    outputDir = file("$buildDir/generated/template")
}

task compileTestTemplates(type: TemplateTask) {
    inputDir = file('src/testTemplate')
    outputDir = file("$buildDir/generated/testTemplate")
}

kotlin {
    jvm {
        compilations.main.kotlinOptions {
            jvmTarget = "1.8"
        }
        compilations.test.kotlinOptions {
            jvmTarget = "1.8"
        }
    }
    js {
        nodejs()
        browser()
        compilations.main.kotlinOptions {
            sourceMap = true
            moduleKind = "umd"
        }
        compilations.test.kotlinOptions {
            moduleKind = "umd"
        }
    }
    linuxX64('linux')
    iosArm64()
    iosX64()
    macosX64('macos')

    targets.all {
        if (name != 'metadata') {
            compilations.test.kotlinOptions {
                freeCompilerArgs += ["-Xuse-experimental=kotlin.Experimental"]
            }
        }
    }

    def opentest4k_version = '1.1.3'
    def kotlin_coroutines_version = '1.2.2'

    sourceSets {
        commonMain {
            dependencies {
                implementation kotlin('stdlib-common')
                implementation "com.willowtreeapps.opentest4k:opentest4k:$opentest4k_version"
            }
            kotlin.srcDirs += files(compileTemplates)
        }
        commonTest {
            dependencies {
                implementation kotlin('test-common')
                implementation kotlin('test-annotations-common')
            }
            kotlin.srcDirs += files(compileTestTemplates)
        }
        jvmMain {
            dependencies {
                implementation kotlin('stdlib-jdk8')
                compileOnly kotlin('reflect')
            }
        }
        jvmTest {
            dependencies {
                implementation project('java-interop')
                implementation kotlin('test-junit')
                implementation kotlin('reflect')
                implementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:$kotlin_coroutines_version"
            }
        }
        jsMain {
            dependencies {
		// kotlin-js doesn't handle this as a transitive dep correctly
		// when it's scoped as runtime.
                api "com.willowtreeapps.opentest4k:opentest4k-js:$opentest4k_version"
                implementation kotlin('stdlib-js')
            }
        }
        jsTest {
            dependencies {
                implementation kotlin('test-js')
                implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core-js:$kotlin_coroutines_version"
            }
        }
        nativeMain {
            dependsOn(commonMain)
        }
        nativeTest {
            dependsOn(commonTest)
        }
        [linuxMain, iosArm64Main, iosX64Main, macosMain].each {
            it.dependsOn(nativeMain)
        }
        [linuxTest, iosArm64Test, iosX64Test, macosTest].each {
            it.dependsOn(nativeTest)
        }
        linuxTest {
            dependencies {
                implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core-linuxx64:$kotlin_coroutines_version"
            }
        }
        iosArm64Test {
            dependencies {
                implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core-iosarm64:$kotlin_coroutines_version"
            }
        }
        iosX64Test {
            dependencies {
                implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core-iosx64:$kotlin_coroutines_version"
            }
        }
        macosTest {
            dependencies {
                implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core-macosx64:$kotlin_coroutines_version"
            }
        }
    }
}

[compileKotlinMetadata, compileKotlinJvm, compileKotlinJs].each { it.dependsOn(compileTemplates) }
[compileTestKotlinJvm, compileTestKotlinJs].each { it.dependsOn(compileTestTemplates) }

apply from: 'gradle/ios-test.gradle'

task nativeTest {
    dependsOn(linuxTest, macosTest, iosTest)
}

task test {
    dependsOn(jvmTest, jsTest, nativeTest)
}

gitPublish {
    repoUri = 'git@github.com:willowtreeapps/assertk.git'
    branch = 'gh-pages'
    contents {
        from 'build/javadoc/jvm'
        into 'javadoc'
    }
}

task detektMain(type: io.gitlab.arturbosch.detekt.Detekt) {
    input = files(kotlin.sourceSets.commonMain.kotlin, kotlin.sourceSets.jsMain.kotlin, kotlin.sourceSets.jvmMain.kotlin)
    config = files("detekt.yml")
    // https://github.com/arturbosch/detekt/issues/1761
    ignoreFailures = false
    reports {
        xml.destination = file("$buildDir/reports/detektMain/detekt.xml")
        html.destination = file("$buildDir/reports/detektMain/detekt.html")
    }
}

task detektTest(type: io.gitlab.arturbosch.detekt.Detekt) {
    input = files(kotlin.sourceSets.commonTest.kotlin, kotlin.sourceSets.jsTest.kotlin, kotlin.sourceSets.jvmTest.kotlin)
    config = files("detekt-test.yml")
    // https://github.com/arturbosch/detekt/issues/1761
    ignoreFailures = false
    reports {
        xml.destination = file("$buildDir/reports/detektTest/detekt.xml")
        html.destination = file("$buildDir/reports/detektTest/detekt.html")
    }
}

tasks.detekt.dependsOn(detektMain, detektTest)

task dokkaCommon(type: org.jetbrains.dokka.gradle.DokkaTask) {
    impliedPlatforms = ["Common"]
    kotlinTasks { [] }
    outputFormat = 'html'
    outputDirectory = "$buildDir/javadoc/common"
    sourceRoot {
        path = kotlin.sourceSets.commonMain.kotlin.srcDirs[0]
        platforms = ["Common"]
    }
}

task dokkaJs(type: org.jetbrains.dokka.gradle.DokkaTask) {
    impliedPlatforms = ["JS", "Common"]
    kotlinTasks { [] }
    outputFormat = 'html'
    outputDirectory = "$buildDir/javadoc/js"
    sourceRoot {
        path = kotlin.sourceSets.commonMain.kotlin.srcDirs[0]
        platforms = ["Common"]
    }
    sourceRoot {
        path = kotlin.sourceSets.jsMain.kotlin.srcDirs[0]
        platforms = ["JS"]
    }
}

task dokkaJvm(type: org.jetbrains.dokka.gradle.DokkaTask) {
    impliedPlatforms = ["JVM", "Common"]
    kotlinTasks { [compileKotlinJvm] }
    outputFormat = 'html'
    outputDirectory = "$buildDir/javadoc/jvm"
    sourceRoot {
        path = kotlin.sourceSets.commonMain.kotlin.srcDirs[0]
        platforms = ["Common"]
    }
    sourceRoot {
        path = kotlin.sourceSets.jvmMain.kotlin.srcDirs[0]
        platforms = ["JVM"]
    }
}

task dokkaNative(type: org.jetbrains.dokka.gradle.DokkaTask) {
    impliedPlatforms = ["Native", "Common"]
    kotlinTasks { [] }
    outputFormat = 'html'
    outputDirectory = "$buildDir/javadoc/native"
    sourceRoot {
        path = kotlin.sourceSets.commonMain.kotlin.srcDirs[0]
        platforms = ["Common"]
    }
    sourceRoot {
        path = kotlin.sourceSets.nativeMain.kotlin.srcDirs[0]
        platforms = ["Native"]
    }
}

task dokkaJavadocCommonJar(type: Jar, dependsOn: dokkaCommon) {
    archiveClassifier.set('javadoc')
    from "$buildDir/javadoc/common"
}

task dokkaJavadocJsJar(type: Jar, dependsOn: dokkaJs) {
    archiveClassifier.set('javadoc')
    from "$buildDir/javadoc/js"
}

task dokkaJavadocJvmJar(type: Jar, dependsOn: dokkaJvm) {
    archiveClassifier.set('javadoc')
    from "$buildDir/javadoc/jvm"
}

task dokkaJavadocNativeJar(type: Jar, dependsOn: dokkaNative) {
    archiveClassifier.set('javadoc')
    from "$buildDir/javadoc/native"
}

task emptySourcesJar(type: Jar) {
    archiveClassifier.set('sources')
}

publishing {
    repositories {
        maven {
            if (project.ext.isReleaseVersion) {
                url 'https://oss.sonatype.org/service/local/staging/deploy/maven2/'
            } else {
                url 'https://oss.sonatype.org/content/repositories/snapshots/'
            }

            credentials {
                username = project.findProperty('sonatype.username')
                password = project.findProperty('sonatype.password')
            }
        }
    }

    publications {
        js {
            artifact dokkaJavadocJsJar
        }
        jvm {
            artifact dokkaJavadocJvmJar
        }
        linux {
            artifact dokkaJavadocNativeJar
        }
        // These aren't available if you aren't on macos
        if (Os.isFamily(Os.FAMILY_MAC)) {
            [iosArm64, iosX64, macos].each {
                it.artifact dokkaJavadocNativeJar
            }
        }
        metadata {
            artifact dokkaJavadocCommonJar
        }
        kotlinMultiplatform {
            // Source jars are only created for platforms, not the common artifact.
            artifact emptySourcesJar
            artifact dokkaJavadocCommonJar
        }

        all {
            def siteUrl = 'https://github.com/willowtreeapps/opentest4k'
            def gitUrl = 'https://github.com/willowtreeapps/opentest4k.git'

            pom {
                name = project.name
                description = 'assertions for kotlin inspired by assertj'
                url = siteUrl

                scm {
                    url = siteUrl
                    connection = gitUrl
                    developerConnection = gitUrl
                }

                licenses {
                    license {
                        name = 'The Apache Software License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                        distribution = 'repo'
                    }
                }

                developers {
                    developer {
                        id = 'evant'
                        name = 'Evan Tatarka'
                    }
                }
            }
        }
    }
}

signing {
    publishing.publications.all { sign it }
}

